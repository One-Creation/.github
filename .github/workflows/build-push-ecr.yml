on:
  workflow_call:
    inputs:
      projectName:
        required: true
        type: string    
   
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Initialization
        id: init
        #We set the values in the output to be able to use them later
        run: |
          git config --global user.name 'gh-devops-bot'
          git config --global user.email 'dev-ops-bot@onecreation.com'   
          echo "origin_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          echo "origin_project=${{  inputs.projectName  }}" >> $GITHUB_OUTPUT
          echo "origin_event_name=${{ github.event_name }}" >> $GITHUB_OUTPUT       
  
      - name: Code checkout
        uses: actions/checkout@v3.1.0
        with:
          token: ${{ secrets.ONECREATION_PAT_TOKEN }}
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 1200
          role-session-name: GitHubActionsOcDrmMarketplaceBuild
          
      - name: Docker generation
        # we only run if it's a pr to main branch
        id: docker_gen
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |    
          PROJECT_VERSION_BUILD="$PROJECT_VERSION"
          aws ecr get-login-password --region ${{ secrets.REGION }}| docker login ${{ secrets.DOCKER_REPO }} -u AWS --password-stdin
          wget -O dd-java-agent.jar 'https://github.com/DataDog/dd-trace-java/releases/download/v1.19.3/dd-java-agent-1.19.3.jar'
          test -e ../src/main/docker/Dockerfile && cp ../src/main/docker/Dockerfile DockerFile || cp ../Dockerfile DockerFile
          docker build -t ${{ inputs.projectName}}:$PROJECT_VERSION_BUILD -f DockerFile . 
          DOCKER=${{ secrets.DOCKER_REPO }}/${{ secrets.DOCKER_ORGANIZATION }}/${{ inputs.projectName}}:$PROJECT_VERSION_BUILD
          docker tag ${{ inputs.projectName}}:$PROJECT_VERSION_BUILD $DOCKER
          docker push $DOCKER
          echo "docker_tag=$PROJECT_VERSION_BUILD" >> $GITHUB_OUTPUT    
          echo "docker_image=$DOCKER" >> $GITHUB_OUTPUT    
        working-directory: ./target

      - name: Notify Status of build in Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_CHANNEL: pipeline-status-notification
          SLACK_TITLE: "${{ inputs.projectName }} - TAG number: ${{ steps.docker_gen.outputs.docker_tag }}"
          SLACK_MESSAGE : ${{ github.event.head_commit.message}}
