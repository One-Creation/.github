on:
  workflow_call:
    inputs:
      projectName:
        required: true
        type: string
      projectAlias:
        required: true
        type: string
      namespace:
        required: true
        type: string        
                
        
jobs:
  build:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read      
    steps:
      - name: Initialization
        id: init
        #We set the values in the output to be able to use them later
        run: |
          echo "docker_tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
          echo "docker_image=${{ github.event.client_payload.image }}" >> $GITHUB_OUTPUT
          echo "origin_ref=${{  github.event.client_payload.ref  }}" >> $GITHUB_OUTPUT
          echo "origin_event_name=${{ github.event.client_payload.event_name }}" >> $GITHUB_OUTPUT        

      - name: Checkout One Creation Kubernetes repository
        # we only deploy if it's a merge to main branch
        if: contains(steps.init.outputs.origin_event_name, 'push')
        uses: actions/checkout@v3.1.0
        with:
          repository: One-Creation/oc-drm-kubernetes
          ref: refs/heads/develop
          token:  ${{ secrets.ONECREATION_DEVELOPER_PAT }}
          persist-credentials: false
          path: ./oc-drm-kubernetes

      - name: Update Release information
        id: release-info
        # we only deploy if it's a merge to main branch
        if: contains(steps.init.outputs.origin_event_name, 'push')
        run: |
          RELEASE_VERSION=$(ls -t -s -r ../charts/releases/values* | head -1 | cut -d '/' -f4 )
          python UpdateReleaseImages.py -r  $RELEASE_VERSION -s ${{ inputs.projectName }} -t ${{  steps.init.outputs.docker_tag  }}  
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT      

        working-directory: oc-drm-kubernetes/helm/scripts

      - name: Commit Changes on Kubernetes repo
        if: contains(steps.init.outputs.origin_event_name, 'push')
        uses: actions-js/push@v1.3
        with:
          github_token: ${{ secrets.ONECREATION_DEVELOPER_PAT }}
          message: Updating release details
          repository: One-Creation/oc-drm-kubernetes
          branch: develop
          empty: true
          directory: oc-drm-kubernetes/helm/charts/releases
      
      - name: Configure AWS Credentials
        if: contains(steps.init.outputs.origin_event_name, 'push')
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.REGION }}
          role-to-assume: ${{ secrets.AWS_ACTIONS_DEV_IAM_ROLE }}

      - name: Install Microservice
        # we only deploy if it's a merge to main branch
        if: contains(steps.init.outputs.origin_event_name, 'push')
        env:
          NAMESPACE: ${{ inputs.namespace }}
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_INT }} --region ${{ secrets.REGION }}
          kubectl config set-context --current --namespace=$NAMESPACE
          chmod 755 install.sh
          RELEASE_VERSION=$(echo "${{  steps.release-info.outputs.release_version  }}"  | sed 's/values-//' | sed 's/.yaml//')
          export EXTERNALSET="--set ${{ inputs.projectAlias }}.${{ inputs.projectName }}.image.tag=${{ steps.init.outputs.docker_tag }}"
          ./install.sh $RELEASE_VERSION dev01
        working-directory: oc-drm-kubernetes/helm/scripts
      
      - name: Wait for deployment to be ready
        if: contains(steps.init.outputs.origin_event_name, 'push')
        env:
          NAMESPACE: ${{ inputs.namespace }}
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_INT }} --region ${{ secrets.REGION }}
          kubectl config set-context --current --namespace=$NAMESPACE
          kubectl rollout status deployment ${{ inputs.projectName }} --timeout=600s;
          if [[ $? -ne 0 ]]; then
            echo "### Deployment has not been successful, timeout of 10 minutes reached ❌" >> $GITHUB_STEP_SUMMARY
            echo "Running debug command: $kubectl get pods -l app.kubernetes.io/name=${{ inputs.projectName }}" >> $GITHUB_STEP_SUMMARY
            kubectl get pods -l app.kubernetes.io/name=${{ inputs.projectName }} >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo '### Deployment successful and ready to be used in Dev 🚀' >> $GITHUB_STEP_SUMMARY
            echo 'Running status command: $kubectl get pods -l app.kubernetes.io/name=${{ inputs.projectName }}' >> $GITHUB_STEP_SUMMARY
            kubectl get pods -l app.kubernetes.io/name=${{ inputs.projectName }} >> $GITHUB_STEP_SUMMARY
          fi