name: End2End Test automation run
   
on:
  workflow_call:
    inputs:
      projectName:
        required: true
        type: string
      projectAlias:
        required: true
        type: string        
      namespace:
        required: true
        type: string             
      tag:
        required: true
        type: string  
      origin_ref:
        required: true
        type: string                    
      event_name:
        required: true
        type: string          

  workflow_dispatch:
    inputs:
      projectName:
        required: true
        type: string
      projectAlias:
        required: true
        type: string        
      namespace:
        required: true
        type: string      
      tag:
        required: true
        type: string  
      origin_ref:
        required: true
        type: string            
      event_name:
        required: true
        type: string          

jobs:
  build:
    name: E2E
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 14.15.1 ]

    steps:
      - name: Initialization
        id: init
        #      We set the values in the output to be able to use them later
        run: |
          echo "::set-output name=docker_tag::${{ inputs.tag }}"
          echo "::set-output name=origin_ref::${{ inputs.origin_ref  }}"
          echo "::set-output name=origin_event_name::${{ inputs.event_name  }}"
      - name: Checkout Test Automation Repository
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        uses: actions/checkout@v3
        with:
          repository: One-Creation/oc-drm-test-automation
          ref: refs/heads/develop
          token: ${{ secrets.ONECREATION_PAT_TOKEN }}
          persist-credentials: false
          path: ./oc-drm-test-automation

      - name: Checkout One Creation Kubernetes repository
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        uses: actions/checkout@v3
        with:
          repository: One-Creation/oc-drm-kubernetes
          ref: refs/heads/master
          token: ${{ secrets.ONECREATION_PAT_TOKEN }}
          persist-credentials: false
          path: ./oc-drm-kubernetes

      - name: Create namespace in dev cluster
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        env:
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NAMESPACE: ${{ inputs.namespace }}          
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_INT }} --region  ${{ secrets.REGION }} 
          kubectl create namespace $NAMESPACE && true
          kubectl config set-context --current --namespace=$NAMESPACE

      - name: Prepare Helm Remote Repository
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        run: helm repo add one-creation ${{ secrets.ONE_CREATION_BASE_CHART_URL }}


      - name: Install Onecreation System dependencies
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        env:
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NAMESPACE: ${{ inputs.namespace }}          
        run: |
          kubectl config set-context --current --namespace=$NAMESPACE
          helm dependency update
          helm upgrade --install onecreation-system  . --set oc-ext-secrets.env.AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --set oc-ext-secrets.env.AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --set oc-ext-secrets.nameOverride=oc-ext-secrets-$NAMESPACE --set oc-ext-secrets.serviceAccountName=ocextsecret-$NAMESPACE  --wait
        working-directory: oc-drm-kubernetes/helm/environments/dev/system

      - name: Install Onecreation
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        env:
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NAMESPACE: ${{ inputs.namespace }}
        run: |
          kubectl config set-context --current --namespace=$NAMESPACE
          chmod 755 install.sh
          kubectl delete secret onecreationpullimage && true
          kubectl create secret docker-registry onecreationpullimage  --docker-server=${{ secrets.DOCKER_REPO }} --docker-username=AWS --docker-password=$(aws ecr get-login-password --region eu-central-1)
          kubectl create clusterrolebinding system:serviceaccount:default:default --clusterrole=cluster-admin --serviceaccount=default:default && true
          export EXTERNALSET="--set global.image.pullSecrets.enabled=true --set global.image.pullSecrets.name=onecreationpullimage --set encryption.oc-vault-helm.fullnameOverride=oc-encrypion-ms-oc-vault-$NAMESPACE --set global.namespace.enabled=true --set global.namespace.value=$NAMESPACE --set ${{ inputs.projectAlias }}.${{ inputs.projectName }}.image.tag=${{ steps.init.outputs.docker_tag }}"
          sleep 5
          RELEASE_VERSION=$(ls -t -s -r ../charts/releases/values* | head -1 | cut -d '/' -f4 | sed 's/values-//' | sed 's/.yaml//' )
          ./install.sh $RELEASE_VERSION e2e ../charts/one-creation/
          sleep 10
          kubectl wait pods -n $NAMESPACE -l app.kubernetes.io/name=oc-drm-daml --for condition=ContainersReady --timeout=600s && true
          kubectl wait pods -n $NAMESPACE -l app.kubernetes.io/name=oc-drm-service --for condition=ContainersReady --timeout=300s && true
          kubectl get pods
        working-directory: oc-drm-kubernetes/helm/scripts

      - name: Install TestAutomation Nginx
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        env:
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NAMESPACE: ${{ inputs.namespace }}
        run: |
          kubectl config set-context --current --namespace=$NAMESPACE
          helm dependency update
          helm upgrade --install oc-test-automation . --wait
        working-directory: oc-drm-kubernetes/helm/environments/genericSystemApplications/oc-test-automation/

      - name: Port Forward from cluster
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        env:
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NAMESPACE: ${{ inputs.namespace }}
        run: |
          kubectl config set-context --current --namespace=$NAMESPACE
          kubectl port-forward $(kubectl get pods --no-headers=true -o custom-columns=NAME_OF_MY_POD:.metadata.name |grep automation) 8080:8080&
          kubectl port-forward $(kubectl get pods --no-headers=true -o custom-columns=NAME_OF_MY_POD:.metadata.name |grep marketplace) 8091:8091&
          kubectl port-forward $(kubectl get pods --no-headers=true -o custom-columns=NAME_OF_MY_POD:.metadata.name |grep user) 8092:8091&
        working-directory: oc-drm-test-automation

      - name: Compile E2E tests
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        run: npm install --force
        working-directory: oc-drm-test-automation

      - name: Run E2E Sanities
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        run: yarn test:e2eSanity
        working-directory: oc-drm-test-automation

        #- name: Run E2E
        # we only run E2E if it's a pr to main branch
#         if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        #  run: yarn test:e2e
        #  working-directory: oc-drm-test-automation

      - name: Get Allure history
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        uses: actions/checkout@v2
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages     

      - name: Allure Report Generation for Automated Test Execution
        uses: simple-elf/allure-report-action@master
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        #id: allure-report
        with:
          allure_results: oc-drm-test-automation/reports/allure-results
          gh_pages: gh-pages
          #allure_report: allure-report
          allure_history: oc-drm-test-automation/reports/allure-history
          keep_reports: 10

      - name: Test Automation Reports
        if: ${{ contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request') && (success() || failure()) }}
        run: |
           echo "Regenerating all the non-Allure reports..."
           echo "> Dashboard..."
           yarn generateDashboard
           echo "> Test Coverage..."
           yarn generateTestCoverageReport
           echo "> API Coverage..."
           yarn generateApiCoverageReport
           echo "> Story Coverage..."
           yarn generateStoryCoverageReport
           echo "> Story to API Coverage..."
           yarn generateStoryToApiReport
           echo "...done"
           echo "-------------------------------"
           curl -o allure-2.14.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.14.0/allure-2.14.0.tgz
           tar -zxvf allure-2.14.0.tgz -C /opt/
           sudo ln -s /opt/allure-2.14.0/bin/allure /usr/bin/allure
           allure --version
           echo "Regenerating Allure website..."
           yarn allureGenerate
        working-directory: oc-drm-test-automation    
        
      - name: Deploy report to Github Pages
        # we only run E2E if it's a pr to main branch
        if: contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.ONECREATION_PAT_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: oc-drm-test-automation/reports/allure-site

      - name: Uninstall temporal data
        if: always()
        env:
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          NAMESPACE: ${{ inputs.namespace }}                    
        run: |
          aws eks update-kubeconfig --name onecreation_eks-dev-eu-central-1 --region eu-central-1 && true
          kubectl delete namespace $NAMESPACE --ignore-not-found

      - name: Dispatch action to deploy project
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.ONECREATION_PAT_TOKEN }}
          event-type: deploy-event
          client-payload: '{"ref": "${{  steps.init.outputs.origin_ref }}", "image": "${{  steps.init.outputs.docker_image }}", "tag": "${{  steps.init.outputs.docker_tag }}", "event_name": "${{ steps.init.outputs.origin_event_name }}"}'
