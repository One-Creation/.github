on:
  workflow_call:
    inputs:
      projectName:
        required: true
        type: string
      projectAlias:
        required: true
        type: string
      namespace:
        required: true
        type: string        
   
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Initialization
        id: init
        #We set the values in the output to be able to use them later
        run: |
          git config --global user.name 'gh-devops-bot'
          git config --global user.email 'dev-ops-bot@onecreation.com'   
          echo "origin_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          echo "origin_project=${{  inputs.projectName  }}" >> $GITHUB_OUTPUT
          echo "origin_event_name=${{ github.event_name }}" >> $GITHUB_OUTPUT       
      - name: Set up JDK 13
        if: "!contains(github.event.head_commit.message,'maven-release-plugin')"
        uses: actions/setup-java@v3.6.0
        with:
          java-version: 13
          distribution: 'zulu'
  
      - name: Code checkout
        if: "!contains(github.event.head_commit.message,'maven-release-plugin')"
        uses: actions/checkout@v3.1.0
        with:
          token: ${{ secrets.ONECREATION_PAT_TOKEN }}
    
      - name: Configure AWS Credentials
        if: "!contains(github.event.head_commit.message,'maven-release-plugin')"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 1200
          role-session-name: GitHubActionsOcDrmMarketplaceBuild
          
      - name: Get maven settings
        if: "!contains(github.event.head_commit.message,'maven-release-plugin')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: aws s3 cp s3://${{ secrets.PIPELINE_RESOURCES }}/maven/settings.xml ~/.m2/settings.xml

      - name: Get CodeArtifact Token
        if: "!contains(github.event.head_commit.message,'maven-release-plugin')"
        env:
          REGION: ${{ secrets.REGION }}
        run: echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.SONAR_DOMAIN }} --domain-owner ${{ secrets.DOMAIN_OWNER }} --query authorizationToken --region ${{ env.REGION }} --output text)" >> $GITHUB_ENV

      - name: Restore Maven cache
        if: "!contains(github.event.head_commit.message,'maven-release-plugin')"
        uses: skjolber/maven-cache-github-action@v1.1
        with:
          step: restore

      - name: Format check
        # we only run if it's a pr to main branch
        if: "!contains(github.event.head_commit.message,'maven-release-plugin')  && contains(steps.init.outputs.origin_event_name,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')"
        run: mvn fmt:check

      - name: Build and Test
        # we only run if it's a pr to main branch
        if: "!contains(github.event.head_commit.message,'maven-release-plugin') && contains(steps.init.outputs.origin_event_name ,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn clean install
 
      - name: Build and Release
        id: release
        if: "!contains(github.event.head_commit.message,'maven-release-plugin') && contains(steps.init.outputs.origin_event_name ,'push') && !contains(github.event.head_commit.message,'Bump')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}      
        run: |        
          git config --global user.name 'gh-devops-bot'
          git config --global user.email 'dev-ops-bot@onecreation.com'
          mvn versions:use-releases
          mvn release:prepare -DcheckModificationExcludeList=pom.xml -U -Dmaven.tests.skip=true -DskipTests=true -DautoResolveSnapshosts="all"  -Dusername="gh-devops-bot" -Dpassword="${{ secrets.ONECREATION_PAT_TOKEN }}"
          export VERSION=$(grep  -i "scm.tag=" release.properties | sed s"/scm.tag=//" | sed s"/${{ inputs.projectName }}-//")
          mvn clean install -U -Dmaven.test.skip=true -DskipTests=true
          mvn release:perform -U -Dmaven.tests.skip=true -DskipTests=true -DlocalCheckout=true
          git pull
          git push 
          echo "closed_version=$VERSION" >> $GITHUB_OUTPUT             
 
      - name: Quality Gate
        # we only run if it's a pr to main branch
        if: "!contains(github.event.head_commit.message,'maven-release-plugin') && contains(steps.init.outputs.origin_ref,'pull') && contains( steps.init.outputs.origin_event_name, 'pull_request')"
        env:      
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_ORGANIZATION: one-creation
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_KEY: One-Creation_${{ inputs.projectName }}
        run: mvn sonar:sonar -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ env.PROJECT_KEY }} -Dsonar.host.url=${{ env.SONAR_HOST_URL }} -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: Docker generation
        # we only run if it's a pr to main branch
        id: docker_gen
        if: "!contains(github.event.head_commit.message,'maven-release-plugin') "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          AWS_REGION: ${{ secrets.REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |    
          test ${{ steps.release.outputs.closed_version }} && PROJECT_VERSION=${{ steps.release.outputs.closed_version }} || PROJECT_VERSION=`mvn -f ../pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout`          
          PROJECT_VERSION_BUILD="$PROJECT_VERSION"
          aws ecr get-login-password --region ${{ secrets.REGION }}| docker login ${{ secrets.DOCKER_REPO }} -u AWS --password-stdin
          wget -O dd-java-agent.jar 'https://github.com/DataDog/dd-trace-java/releases/download/v0.97.0/dd-java-agent.jar'
          test -e ../src/main/docker/Dockerfile && cp ../src/main/docker/Dockerfile DockerFile || cp ../Dockerfile DockerFile
          docker build -t ${{ inputs.projectName}}:$PROJECT_VERSION_BUILD -f DockerFile . 
          DOCKER=${{ secrets.DOCKER_REPO }}/${{ secrets.DOCKER_ORGANIZATION }}/${{ inputs.projectName}}:$PROJECT_VERSION_BUILD
          docker tag ${{ inputs.projectName}}:$PROJECT_VERSION_BUILD $DOCKER
          docker push $DOCKER
          echo "docker_tag=$PROJECT_VERSION_BUILD" >> $GITHUB_OUTPUT    
          echo "docker_image=$DOCKER" >> $GITHUB_OUTPUT    
        working-directory: ./target
   
      - name: Save Maven cache
        if: always()
        uses: skjolber/maven-cache-github-action@v1.1
        with:
          step: save
          
      - name: Invoke E2E workflow and wait for conclusion
        uses: aurelien-baudet/workflow-dispatch@v2.1.1
        if: "!contains(github.event.head_commit.message,'maven-release-plugin') "
        with:
          workflow: e2e.yml
          token: ${{ secrets.ONECREATION_PAT_TOKEN }}        
          wait-for-completion: true
          display-workflow-run-url: true
          ref: develop
          inputs: '{ "projectName": "${{ inputs.projectName }}", "projectAlias": "${{ inputs.projectAlias }}",  "namespace": "${{ inputs.namespace }}", "origin_ref": " ${{ github.ref }}", "tag": "${{ steps.docker_gen.outputs.docker_tag }}", "event_name": "${{ github.event_name }}" }'

      - name: Notify Status of build in Slack
        if: "always() && !contains(github.event.head_commit.message,'maven-release-plugin')"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_CHANNEL: pipeline-status-notification
          SLACK_TITLE: "${{ inputs.projectName }} - TAG number: ${{ steps.docker_gen.outputs.docker_tag }}"
          SLACK_MESSAGE : ${{ github.event.head_commit.message}}
